environments:
  nookr:
    account_id: 238164213705
    vars:
      HostedZoneId: "Z2QWTUDU3AAFZF"
      HostedZoneName: "nookr.io"
    tags:
      Environment: "{environment}"

plans:
  all:
  - network
  - network-security
  - iam
  - data
  - compute
  - logs
  - proxy
  - docker
  - dns

stacks:
  network:
    stack_name: "{environment}-network"
    stack_yaml: "{:config_dir}/network.yml"
    params_yaml:
      Environment: "{environment}"
      PublicAzCidrs: "10.222.1.0/24,10.222.2.0/24,10.222.3.0/24"
      VpcCidrRange: "10.222.0.0/16"

  network-security:
    stack_name: "{environment}-network-security"
    stack_yaml: "{:config_dir}/network-security.yml"
    params_yaml:
      VpcId: XXX_VPCID_XXX
    vars:
      VpcId: ["{environment}-network", "VpcId"]

  iam:
    stack_name: "{environment}-iam"
    stack_yaml: "{:config_dir}/iam.yml"

  data:
    stack_name: "{environment}-data"
    stack_yaml: "{:config_dir}/data.yml"

  compute:
    stack_name: "{environment}-compute"
    stack_yaml: "{:config_dir}/compute.yml"
    params_yaml:
      InstanceRole: XXX_INSTANCEROLE_XXX
      ImageId: ami-a677b6c4 #ECS Optimized AMI
      InstanceType: t2.micro
      KeyName: operators
      SecurityGroups: XXX_SECURITYGROUPS_XXX
      SubnetIds: XXX_SUBNETIDS_XXX
      ProjectName: nookr
      VolumeId: XXX_VOLUMEID_XXX
    vars:
      InstanceRole: ["{environment}-iam", "InstanceRole"]
      SecurityGroups: ["{environment}-network-security", "SecurityGroups"]
      SubnetIds: ["{environment}-network", "SubnetIdsPublic"]
      VolumeId: ["{environment}-data", "VolumeId"]

  logs:
    stack_name: "{environment}-cloudwatch-logs"
    stack_yaml: "{:config_dir}/cloudwatch-logs.yml"

  tls:
    stack_yaml: "{:config_dir}/tls.yml"
    stack_name: "{environment}-tls"
    params_yaml:
      DomainName: nookr.io
      ValidationDomain: nookr.io

  proxy:
    stack_name: "{environment}-proxy"
    stack_yaml: "{:config_dir}/proxy.yml"
    params_yaml:
      VpcId: XXX_VPCID_XXX
      Subnets: XXX_SUBNETS_XXX
      SecurityGroups: XXX_SECURITYGROUPS_XXX
      Scheme: internet-facing
      WildcardCertificateArn: XXX_WILDCARDCERTIFICATEARN_XXX
    vars:
      VpcId: ["{environment}-network", "VpcId"]
      Subnets: ["{environment}-network", "SubnetIdsPublic"]
      SecurityGroups: ["{environment}-network-security", "SecurityGroupPublic"]
      WildcardCertificateArn: ["{environment}-tls", "WildcardCertificateArn"]

  docker:
    stack_name: "{environment}-docker"
    stack_yaml: "{:config_dir}/docker.yml"
    params_yaml:
      ProjectName: nookr
      ServiceRole: XXX_SERVICEROLE_XXX
      TargetGroupProxy: XXX_TARGETGROUPPROXY_XXX
    vars:
      ServiceRole: ["{environment}-iam", "ServiceRole"]
      TargetGroupProxy: ["{environment}-proxy", "TargetGroupProxy"]

  dns:
    stack_name: "{environment}-dns"
    stack_yaml: "{:config_dir}/dns.yml"
    params_yaml:
      HostedZoneId: XXX_HOSTEDZONEID_XXX
      HostedZoneName: XXX_HOSTEDZONENAME_XXX
      ServerIpAddress: XXX_SERVERIPADDRESS_XXX
      LoadBalancerDNSName: XXX_LOADBALANCERDNSNAME_XXX
      LoadBalancerCanonicalHostedZoneID: XXX_LOADBALANCERCANONICALHOSTEDZONEID_XXX
    vars:
      ServerIpAddress: ["{environment}-compute", "IpAddress"]
      LoadBalancerDNSName: ["{environment}-proxy", "DNSName"]
      LoadBalancerCanonicalHostedZoneID: ["{environment}-proxy","CanonicalHostedZoneID" ]
